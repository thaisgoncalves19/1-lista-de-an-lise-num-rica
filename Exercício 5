import math

#######################################################
#Funções para calcular o polinômio interpolador de Lagrange em um ponto.

def produtorio(lista):
    """
    Calcula o produto de todos os elementos de uma lista.
    """
    if 0 in lista:
        return 0
    else:
        prod = lista[0]
        for i in range(1,len(lista)):
            prod *= lista[i]
    return prod
    
def l_k(lista, k, x):
    """
    Calcula o k-ésimo polinômio de Lagrange aplicado em x a partir dos pontos da lista.
    """
    ListaAux = []
    for j in range(0,len(lista)):
        if j != k:
            ListaAux.append((x -lista[j])/(lista[k] - lista[j]))
    return produtorio(ListaAux)

def PoliLagrange(listaX, listaY, x):
    soma = 0
    for k in range(len(listaX)):
        soma = soma + l_k(listaX, k, x) * listaY[k]
    return soma
   
#######################################################

#Função para calcular o erro entre f e p_n

def erro(n,a):
    h = 2 * a /n
    listaX = []
    listaY = []
    for i in range(n+1):
        listaX.append(-a + i * h)
        listaY.append(f(-a + i * h))
    
    N = 100
    hN = 2 * a/N
    
    listaXX = []
    for i in range(N+1):
        listaXX.append(-a + i * hN)
    
    listaErro = []
    
    for x in listaXX:
        listaErro.append(abs(f(x) - PoliLagrange(listaX,listaY,x) ))
    
    erro = max(listaErro)
    
    return erro

   
#Imprime o erro considerando n pontos igualmente espaçados no intervalo [-a, a]
def f(x):
    return 1/(1+x**2)
n=24
a = 5
for i in range(1,n+1):
    print(i,erro(i,a))
    
   
# Quando n fica grande os valores de e_n também ficam grandes.
